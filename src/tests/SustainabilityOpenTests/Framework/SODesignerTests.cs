/// Copyright 2012-2013 Delft University of Technology, BEMNext Lab and contributors
/// 
///    Licensed under the Apache License, Version 2.0 (the "License");
///    you may not use this file except in compliance with the License.
///    You may obtain a copy of the License at
/// 
///        http://www.apache.org/licenses/LICENSE-2.0
/// 
///    Unless required by applicable law or agreed to in writing, software
///    distributed under the License is distributed on an "AS IS" BASIS,
///    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///    See the License for the specific language governing permissions and
///    limitations under the License.
/// 

using NUnit.Framework;
using SustainabilityOpen.Framework;
using SustainabilityOpen.Framework.Design;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

namespace SustainabilityOpenTests.Framework
{
    [TestFixture]
    public class SODesignerTests
    {
        string[] API_PROPERTIES = { "Name",
                                    "CurrentDesignAlternative",
                                    "Designers"
                                  };
        string[] API_METHODS = { "RunDesigner" };

        private const string TEST_NAME = "test designer 0001";

        [Test]
        public void TestAPI()
        {
            Type type = typeof(SODesigner);
            foreach (string property in API_PROPERTIES)
            {
                PropertyInfo pi = type.GetProperty(property);
                Assert.NotNull(pi, property + " not present on " + type.Name);
            }
            foreach (string method in API_METHODS)
            {
                MethodInfo mi = type.GetMethod(method);
                Assert.NotNull(mi, method + " not present on " + type.Name);
            }
        }

        [Test]
        public void TestName()
        {
            SODesigner designer = new SODesigner(TEST_NAME);

            // designer should not be null
            Assert.NotNull(designer);

            // The name should be the same
            Assert.AreEqual(TEST_NAME, designer.Name);
        }

        [Test]
        public void TestCurrentDesignAlternative()
        {
            SODesigner designer = new SODesigner(TEST_NAME);

            // designer should not be null
            Assert.NotNull(designer);

            // name of the alternative should be equal to the default
            Assert.AreEqual(SODesign.DEFAULT_ALTERNATIVE_NAME, designer.CurrentDesignAlternative.Name);
        }

        [Test]
        public void TestDesigners()
        {
            SODesigner designer1 = new SODesigner(TEST_NAME);
            SODesigner designer2 = new SODesigner("002");

            // initial Designers probably should be empty
            Assert.NotNull(designer1.Designers);
            Assert.IsEmpty(designer1.Designers);
            Assert.AreEqual(designer1.Designers.Length, 0);

            // add designer2 to designer1
            designer1.AddParent(designer2);

            // Designers should now contain designer2
            Assert.NotNull(designer1.Designers);
            Assert.IsNotEmpty(designer1.Designers);
            Assert.AreEqual(designer1.Designers.Length, 1);
            Assert.AreEqual(designer1.Designers[0], designer2);

        }
    }
}
