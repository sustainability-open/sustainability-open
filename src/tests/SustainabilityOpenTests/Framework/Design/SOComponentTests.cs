/// Copyright 2012-2013 Delft University of Technology, BEMNext Lab and contributors
/// 
///    Licensed under the Apache License, Version 2.0 (the "License");
///    you may not use this file except in compliance with the License.
///    You may obtain a copy of the License at
/// 
///        http://www.apache.org/licenses/LICENSE-2.0
/// 
///    Unless required by applicable law or agreed to in writing, software
///    distributed under the License is distributed on an "AS IS" BASIS,
///    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///    See the License for the specific language governing permissions and
///    limitations under the License.
/// 

using NUnit.Framework;
using SustainabilityOpen.Framework.Design;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

namespace SustainabilityOpenTests.Framework.Design
{
    [TestFixture]
    public class SOComponentTests
    {
        string[] API_PROPERTIES = { "Name",
                                    "SubComponents",
                                    "Parts" };
        string[] API_METHODS = { "AddSubComponent",
                                 "ClearSubComponents",
                                 "AddPart",
                                 "ClearParts",
                                 "Clear",
                                 "PassOnFlattenedSubComponents",
                                 "PassOnFlattenedLeafSubComponents"
                               };

        [Test]
        public void TestAPI()
        {
            Type type = typeof(SOComponent);
            foreach (string property in API_PROPERTIES)
            {
                PropertyInfo pi = type.GetProperty(property);
                Assert.NotNull(pi, property + " not present on " + type.Name);
            }
            foreach (string method in API_METHODS)
            {
                MethodInfo mi = type.GetMethod(method);
                Assert.NotNull(mi, method + " not present on " + type.Name);
            }
        }

        [Test]
        public void TestSubComponents()
        {
            SOComponent component = new SOComponent("0001");

            // Components should not be null
            Assert.NotNull(component.SubComponents);

            // Components should be empty on the start
            Assert.IsEmpty(component.SubComponents);

            // Add a subcomponent to the component
            SOComponent subcomponent = new SOComponent("0001");
            component.AddSubComponent(subcomponent);

            // Components should no longer be empty
            Assert.IsNotEmpty(component.SubComponents);
            Assert.AreEqual(1, component.SubComponents.Length);
            Assert.IsInstanceOf(typeof(SOComponent), component.SubComponents[0]);
            Assert.AreEqual(subcomponent, component.SubComponents[0]);

            // Clear the subcomponents
            component.ClearSubComponents();

            // Components should be empty
            Assert.IsEmpty(component.SubComponents);
        }

        [Test]
        public void TestParts()
        {
            SOComponent component = new SOComponent("0001");

            // Components should not be null
            Assert.NotNull(component.Parts);

            // Components should be empty on the start
            Assert.IsEmpty(component.Parts);

            // Add a part to the component
            SOPart part = new SOPart("0001", new SOMaterial("steel"), 1, "kg");
            component.AddPart(part);

            // Parts should no longer be empty
            Assert.IsNotEmpty(component.Parts);
            Assert.AreEqual(1, component.Parts.Length);
            Assert.IsInstanceOf(typeof(SOPart), component.Parts[0]);
            Assert.AreEqual(part, component.Parts[0]);

            // Clear the parts
            component.ClearParts();

            // Parts should be empty
            Assert.IsEmpty(component.Parts);
        }

        [Test]
        public void TestClear()
        {
            SOComponent component = new SOComponent("0001");

            // Components should not be null
            Assert.NotNull(component.Parts);

            // Components should be empty on the start
            Assert.IsEmpty(component.SubComponents);
            Assert.IsEmpty(component.Parts);

            // Add a subcomponent to the component
            SOComponent subcomponent = new SOComponent("0001");
            component.AddSubComponent(subcomponent);

            // Components should no longer be empty
            Assert.IsNotEmpty(component.SubComponents);
            Assert.AreEqual(1, component.SubComponents.Length);
            Assert.IsInstanceOf(typeof(SOComponent), component.SubComponents[0]);
            Assert.AreEqual(subcomponent, component.SubComponents[0]);

            // Add a part to the component
            SOPart part = new SOPart("0001", new SOMaterial("steel"), 1, "kg");
            component.AddPart(part);

            // Parts should no longer be empty
            Assert.IsNotEmpty(component.Parts);
            Assert.AreEqual(1, component.Parts.Length);
            Assert.IsInstanceOf(typeof(SOPart), component.Parts[0]);
            Assert.AreEqual(part, component.Parts[0]);

            // Clear the component
            component.Clear();

            // Components should be empty
            Assert.IsEmpty(component.SubComponents);

            // Parts should be empty
            Assert.IsEmpty(component.Parts);
        }

        [Test]
        public void TestPassOnFlattenedSubComponents()
        {
            // set up
            SOComponent component0 = new SOComponent("0000");
            SOComponent component1 = new SOComponent("0001");
            SOComponent component2 = new SOComponent("0002");
            SOComponent component3 = new SOComponent("0003");
            SOComponent component4 = new SOComponent("0004");
            SOComponent component5 = new SOComponent("0005");
            component0.AddSubComponent(component1);
            component1.AddSubComponent(component2);
            component2.AddSubComponent(component3);
            component1.AddSubComponent(component4);
            component0.AddSubComponent(component5);

            // get the flattened list
            List<SOComponent> flattenedList = null;
            component0.PassOnFlattenedSubComponents(ref flattenedList);

            // flattened list should contain 5 items
            Assert.IsNotEmpty(flattenedList);
            Assert.AreEqual(5, flattenedList.Count);
        }

        [Test]
        public void TestPassOnFlattenedLeafSubComponents()
        {
            // set up
            SOComponent component0 = new SOComponent("0000");
            SOComponent component1 = new SOComponent("0001");
            SOComponent component2 = new SOComponent("0002");
            SOComponent component3 = new SOComponent("0003");
            SOComponent component4 = new SOComponent("0004");
            SOComponent component5 = new SOComponent("0005");
            component0.AddSubComponent(component1);
            component1.AddSubComponent(component2);
            component2.AddSubComponent(component3);
            component1.AddSubComponent(component4);
            component0.AddSubComponent(component5);

            // get the flattened list
            List<SOComponent> flattenedList = null;
            component0.PassOnFlattenedLeafSubComponents(ref flattenedList);

            // flattened list should contain 3 items
            Assert.IsNotEmpty(flattenedList);
            Assert.AreEqual(3, flattenedList.Count);
        }
    
    }
}
