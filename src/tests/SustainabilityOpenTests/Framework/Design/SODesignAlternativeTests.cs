/// Copyright 2012-2013 Delft University of Technology, BEMNext Lab and contributors
/// 
///    Licensed under the Apache License, Version 2.0 (the "License");
///    you may not use this file except in compliance with the License.
///    You may obtain a copy of the License at
/// 
///        http://www.apache.org/licenses/LICENSE-2.0
/// 
///    Unless required by applicable law or agreed to in writing, software
///    distributed under the License is distributed on an "AS IS" BASIS,
///    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///    See the License for the specific language governing permissions and
///    limitations under the License.
/// 

using NUnit.Framework;
using SustainabilityOpen.Framework.Design;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

namespace SustainabilityOpenTests.Framework.Design
{
    [TestFixture]
    public class SODesignAlternativeTests
    {
        string[] API_PROPERTIES = { "Name",
                                    "Components",
                                    "FlattenedComponents",
                                    "FlattenedLeafComponents"
                                  };
        string[] API_METHODS = { "AddComponent",
                                 "ClearComponents"
                               };

        [Test]
        public void TestAPI()
        {
            Type type = typeof(SODesignAlternative);
            foreach (string property in API_PROPERTIES)
            {
                PropertyInfo pi = type.GetProperty(property);
                Assert.NotNull(pi, property + " not present on " + type.Name);
            }
            foreach (string method in API_METHODS)
            {
                MethodInfo mi = type.GetMethod(method);
                Assert.NotNull(mi, method + " not present on " + type.Name);
            }
        }

        [Test]
        public void TestComponents()
        {
            SODesignAlternative alternative = new SODesignAlternative("default");

            // Components should not be null
            Assert.NotNull(alternative.Components);

            // Components should be empty on the start
            Assert.IsEmpty(alternative.Components);

            // Add a component
            SOComponent component = new SOComponent("default");
            alternative.AddComponent(component);

            // Components should no longer be empty
            Assert.IsNotEmpty(alternative.Components);
            Assert.AreEqual(1, alternative.Components.Length);

            // Component should match
            Assert.AreEqual(component, alternative.Components[0]);

            // Clear the components
            alternative.ClearComponents();

            // Components should be empty on the start
            Assert.IsEmpty(alternative.Components);
        }

        [Test]
        public void TestFlattenedComponents()
        {
            SODesignAlternative alternative = new SODesignAlternative("default");

            // Components should not be null
            Assert.NotNull(alternative.Components);

            // Components should be empty on the start
            Assert.IsEmpty(alternative.Components);

            // Add a component
            SOComponent component1 = new SOComponent("0001");
            SOComponent component2 = new SOComponent("0002");
            SOComponent component3 = new SOComponent("0003");
            SOComponent component4 = new SOComponent("0004");
            SOComponent component5 = new SOComponent("0005");
            alternative.AddComponent(component1);
            component1.AddSubComponent(component2);
            component2.AddSubComponent(component3);
            component1.AddSubComponent(component4);
            alternative.AddComponent(component5);

            // FlattenedComponents should contain a list of 5 components now
            Assert.IsNotEmpty(alternative.FlattenedComponents);
            Assert.AreEqual(5, alternative.FlattenedComponents.Length);
        }
    }
}
