/// Copyright 2012-2013 Delft University of Technology, BEMNext Lab and contributors
/// 
///    Licensed under the Apache License, Version 2.0 (the "License");
///    you may not use this file except in compliance with the License.
///    You may obtain a copy of the License at
/// 
///        http://www.apache.org/licenses/LICENSE-2.0
/// 
///    Unless required by applicable law or agreed to in writing, software
///    distributed under the License is distributed on an "AS IS" BASIS,
///    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///    See the License for the specific language governing permissions and
///    limitations under the License.
/// 

using NUnit.Framework;
using SustainabilityOpen.Framework;
using SustainabilityOpen.Framework.Design;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

namespace SustainabilityOpenTests.Framework
{
    [TestFixture]
    public class SOControllerTests
    {
        string[] API_PROPERTIES = { "Instance",
                                    "Entities",
                                    "State",
                                    "Design"
                                  };
        string[] API_METHODS = { "AddEntity",
                                 "ClearEntities",
                                 "Solve",
                                 "SetState" 
                               };

        [Test]
        public void TestAPI()
        {
            foreach (string property in API_PROPERTIES)
            {
                PropertyInfo pi = typeof(SOController).GetProperty(property);
                Assert.NotNull(pi, property + " not present on " + typeof(SOController).Name);
            }
            foreach (string method in API_METHODS)
            {
                MethodInfo mi = typeof(SOController).GetMethod(method);
                Assert.NotNull(mi, method + " not present on " + typeof(SOController).Name);
            }
        }

        [Test]
        public void TestInstance()
        {
            SOController controller = SOController.Instance;

            // Instance should not be null
            Assert.NotNull(controller);

            // Instance should be of type SOController
            Assert.IsInstanceOf(typeof(SOController), controller);

            // State should be unsolved
            Assert.AreEqual(SOController.ControllerState.idle, controller.State);
        }

        [Test]
        public void TestEntities()
        {
            SOController controller = SOController.Instance;

            // Instance should not be null
            Assert.NotNull(controller);

            // Entities should not be null
            Assert.NotNull(controller.Entities);
        }

        [Test]
        public void TestAddEntity()
        {
            SOController controller = SOController.Instance;

            // Instance should not be null
            Assert.NotNull(controller);

            // Clear the entities
            controller.ClearEntities();

            // Add a SODesigner to the controller
            controller.AddEntity(new SODesigner("test"));

            // Entities should not be null
            Assert.NotNull(controller.Entities);

            // Entity count should be on 1 now
            Assert.AreEqual(1, controller.Entities.Count());

            // Name of the entity should be "test"
            Assert.AreEqual("test", controller.Entities[0].Name);
        }

        [Test]
        public void TestClearEntities()
        {
            SOController controller = SOController.Instance;

            // Instance should not be null
            Assert.NotNull(controller);

            // Add a SODesigner to the controller
            controller.AddEntity(new SODesigner("test"));

            // Entities should not be null
            Assert.NotNull(controller.Entities);

            // Number of entitities should now be higher than 0
            Assert.Greater(controller.Entities.Count(), 0);

            // Clear the entities
            controller.ClearEntities();

            // Number of entities should now be 0
            Assert.AreEqual(0, controller.Entities.Count());
        }

        [Test]
        public void TestDesign()
        {
            SOController controller = SOController.Instance;

            // Instance should not be null
            Assert.NotNull(controller);

            // Instance should have a design
            Assert.NotNull(controller.Design);
            Assert.IsInstanceOf(typeof(SODesign), controller.Design);
        }
    }
}
