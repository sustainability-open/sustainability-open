/// Copyright 2012-2013 Delft University of Technology, BEMNext Lab and contributors
/// 
///    Licensed under the Apache License, Version 2.0 (the "License");
///    you may not use this file except in compliance with the License.
///    You may obtain a copy of the License at
/// 
///        http://www.apache.org/licenses/LICENSE-2.0
/// 
///    Unless required by applicable law or agreed to in writing, software
///    distributed under the License is distributed on an "AS IS" BASIS,
///    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///    See the License for the specific language governing permissions and
///    limitations under the License.
/// 

using NUnit.Framework;
using SustainabilityOpen.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

namespace SustainabilityOpenTests.Framework
{
    [TestFixture]
    public class SOAnalysisTests
    {
        string[] API_PROPERTIES = { "Name",
                                    "Designers",
                                    "Analyses" 
                                  };
        string[] API_METHODS = { "RunAnalysis",
                                 "AddDesigner",
                                 "ClearDesigners",
                                 "AddAnalysis",
                                 "ClearAnalyses" 
                               };

        private const string TEST_NAME = "test analysis 0001";

        [Test]
        public void TestAPI()
        {
            Type type = typeof(SOAnalysis);
            foreach (string property in API_PROPERTIES)
            {
                PropertyInfo pi = type.GetProperty(property);
                Assert.NotNull(pi, property + " not present on " + type.Name);
            }
            foreach (string method in API_METHODS)
            {
                MethodInfo mi = type.GetMethod(method);
                Assert.NotNull(mi, method + " not present on " + type.Name);
            }
        }

        [Test]
        public void TestName()
        {
            SOAnalysis analysis = new SOAnalysis(TEST_NAME);

            // designer should not be null
            Assert.NotNull(analysis);

            // The name should be the same
            Assert.AreEqual(TEST_NAME, analysis.Name);
        }

        [Test]
        public void TestAddDesigner()
        {
            SOAnalysis analysis = new SOAnalysis(TEST_NAME);

            // analysis should not be null
            Assert.NotNull(analysis);

            // Designers should have zero items
            Assert.IsEmpty(analysis.Designers);

            // Add a SODesigner
            SODesigner designer = new SODesigner("test designer 0001");
            analysis.AddDesigner(designer);

            // Designers should now have one item
            Assert.AreEqual(1, analysis.Designers.Length);
            Assert.AreEqual(designer, analysis.Designers[0]);

            // clear the designers
            analysis.ClearDesigners();

            // Designers should have zero items
            Assert.IsEmpty(analysis.Designers);            
        }

        [Test]
        public void TestAnalyses()
        {
            SOAnalysis analysis1 = new SOAnalysis(TEST_NAME);

            // analysis should not be null
            Assert.NotNull(analysis1);

            // Analyses should have zero items
            Assert.IsEmpty(analysis1.Analyses);

            // Add a SODesigner
            SODesigner designer = new SODesigner("test designer 0001");
            analysis1.AddDesigner(designer);

            // Add a SOAnalysis
            SOAnalysis analysis2 = new SOAnalysis("test analysis 0002");
            analysis1.AddAnalysis(analysis1);

            // Designers should now have one item
            Assert.AreEqual(1, analysis1.Designers.Length);
            Assert.AreEqual(designer, analysis1.Designers[0]);

            // clear the designers
            analysis1.ClearDesigners();

            // Designers should have zero items
            Assert.IsEmpty(analysis1.Designers);

            // Designers should now have one item
            Assert.AreEqual(1, analysis1.Analyses.Length);
            Assert.AreEqual(designer, analysis1.Analyses[0]);

            // clear the designers
            analysis1.ClearAnalyses();

            // Designers should have zero items
            Assert.IsEmpty(analysis1.Analyses);            
        }
    }
}
