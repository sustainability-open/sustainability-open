/// Copyright 2012-2013 Delft University of Technology, BEMNext Lab and contributors
/// 
///    Licensed under the Apache License, Version 2.0 (the "License");
///    you may not use this file except in compliance with the License.
///    You may obtain a copy of the License at
/// 
///        http://www.apache.org/licenses/LICENSE-2.0
/// 
///    Unless required by applicable law or agreed to in writing, software
///    distributed under the License is distributed on an "AS IS" BASIS,
///    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///    See the License for the specific language governing permissions and
///    limitations under the License.
/// 

using NUnit.Framework;
using SustainabilityOpen.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;

namespace SustainabilityOpenTests.Framework
{
    [TestFixture]
    public class SOComponentTests
    {
        string[] API_PROPERTIES = { "Parents",
                                    "Children",
                                    "GUID" };
        string[] API_METHODS = { "AddParent", 
                                 "AddChild" };

        /// <summary>
        /// Mock SOComponent class
        /// </summary>
        public class MockSOComponent : SOComponent
        {
            public MockSOComponent(string name)
                : base(name)
            {
            }
        }

        [Test]
        public void TestAPI()
        {
            Type type = typeof(SOComponent);
            foreach (string property in API_PROPERTIES)
            {
                PropertyInfo pi = type.GetProperty(property);
                Assert.NotNull(pi, "Property " + property + " not present on " + type.Name);
            }
            foreach (string method in API_METHODS)
            {
                MethodInfo mi = type.GetMethod(method);
                Assert.NotNull(mi, "Method " + method + " not present on " + type.Name);
            }
        }

        [Test]
        public void TestGuid()
        {
            string guid = "ThisIsAGuid";
            SOComponent component = new MockSOComponent("test_0001");

            // component should not be null
            Assert.NotNull(component);

            // you should be able to set the guid
            component.GUID = guid;

            // the GUID property should be the same as the guid
            Assert.AreEqual(guid, component.GUID);
        }

        [Test]
        public void TestAddParent()
        {
            SOComponent component1 = new MockSOComponent("test_0001");
            SOComponent component2 = new MockSOComponent("test_0002");

            // component should not be null
            Assert.NotNull(component1);
            Assert.NotNull(component2);

            // Parents should have zero items
            Assert.IsEmpty(component1.Parents);
            Assert.IsEmpty(component2.Parents);

            // component should now have a parent
            component2.AddParent(component1);

            // component2 should have 1 item in Parents
            Assert.IsEmpty(component1.Parents);
            Assert.AreEqual(1, component2.Parents.Length);
            Assert.AreEqual(component1, component2.Parents[0]);
        }

        [Test]
        public void TestAddChild()
        {
            SOComponent component1 = new MockSOComponent("test_0001");
            SOComponent component2 = new MockSOComponent("test_0002");

            // component should not be null
            Assert.NotNull(component1);
            Assert.NotNull(component2);

            // Children should have zero items
            Assert.IsEmpty(component1.Children);
            Assert.IsEmpty(component2.Children);

            // component should now have a child
            component2.AddChild(component1);

            // component2 should have 1 item in Children
            Assert.IsEmpty(component1.Children);
            Assert.AreEqual(1, component2.Children.Length);
            Assert.AreEqual(component1, component2.Children[0]);
        }
    
    }
}
