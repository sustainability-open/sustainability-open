/// Copyright 2012-2013 Delft University of Technology, BEMNext Lab and contributors
/// 
///    Licensed under the Apache License, Version 2.0 (the "License");
///    you may not use this file except in compliance with the License.
///    You may obtain a copy of the License at
/// 
///        http://www.apache.org/licenses/LICENSE-2.0
/// 
///    Unless required by applicable law or agreed to in writing, software
///    distributed under the License is distributed on an "AS IS" BASIS,
///    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///    See the License for the specific language governing permissions and
///    limitations under the License.
/// 

using NUnit.Framework;
using SustainabilityOpen.Helpers;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;

namespace SustainabilityOpenTests.Helpers
{
    [TestFixture]
    public class LogTests
    {
        string LOGFILE = @"c:\so\log.txt";
        string[] API_PROPERTIES = { "LogInstance",
                                    "LogFile",
                                    "Active" };
        string[] API_METHODS = { "StartLog",
                                 "StopLog",
                                 "Add" };

        [Test]
        public void TestAPI()
        {
            Type type = typeof(Log);
            foreach (string property in API_PROPERTIES)
            {
                PropertyInfo pi = type.GetProperty(property);
                Assert.NotNull(pi, property + " not present on " + type.Name);
            }
            foreach (string method in API_METHODS)
            {
                MethodInfo mi = type.GetMethod(method);
                Assert.NotNull(mi, method + " not present on " + type.Name);
            }
        }

        [Test]
        public void TestLogInstance()
        {
            Log log = Log.LogInstance;

            // log should not be null
            Assert.NotNull(log);

            // log should be of type Log
            Assert.IsInstanceOf(typeof(Log), log);
        }

        [Test]
        public void TestLogFileCanOnlyBeSetOnce()
        {
            // sets the log file
            Log log = Log.LogInstance;
            log.LogFile = LOGFILE;

            // log file should be equal to what has been set
            Assert.AreEqual(LOGFILE, log.LogFile);

            // try to set the log file again
            try
            {
                log.LogFile = "newfile.txt";    
            }
            catch (Exception)
            {
                return;
            }
            
            // if the code reaches this point, this is bad news
            Assert.Fail("It should not be possible to set the log filename again");
        }

        [Test]
        public void TestActive()
        {
            // Test if active property is unset
            Assert.IsFalse(Log.LogInstance.Active);
        }

        [Test]
        public void TestStartLog()
        {
            // starts the log
            Log.StartLog(LOGFILE);

            // tests if the log file exists on the filesystem
            bool file_exists = File.Exists(LOGFILE);
            Assert.IsTrue(file_exists);

            // tests if the active property has been set
            Assert.IsTrue(Log.LogInstance.Active);
        }

        [Test]
        public void TestAdd()
        {
            string TEST_MESSAGE = "Test message";
            FileInfo fi = new FileInfo(LOGFILE);
            long originalsize = fi.Length;

            Log.Add(TEST_MESSAGE);

            Assert.AreEqual(originalsize + TEST_MESSAGE.Length, fi.Length);
        }

        [Test]
        public void TestStopLog()
        {
            // stops the log
            Log.StopLog();

            // tests if the active property has been unset
            Assert.IsFalse(Log.LogInstance.Active);
        }
    }
}
